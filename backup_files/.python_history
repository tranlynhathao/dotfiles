_HiStOrY_V2_
print("Hello")
a\040=\04010
b\040=\0406
print(a+b)
:q
exit
import\040pygame
exit()
def\040bubble_sort(arr):
\040\040\040\040n\040=\040len(arr)
\040\040\040\040for\040i\040in\040range(n):
\040\040\040\040\040\040\040\040for\040j\040in\040range(n):
\040\040\040\040\040\040\040\040\040\040\040\040if\040arr[j]\040>\040arr[j\040+\0401]:
\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040swap(arr[j],\040arr[j\040+\0401])
\040\040\040\040return\040arr
print(bubble_sort([4,\0402,\0401,\0408,\0407,\0406]))
def\040bubble_sort(arr):
\040\040\040\040n\040=\040len(arr)
\040\040\040\040for\040i\040in\040range(n):
\040\040\040\040\040\040\040\040for\040j\040in\040range(n):
\040\040\040\040\040\040\040\040\040\040\040\040if\040arr[j]\040>\040arr[j\040+\0401]:
\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040swap(arr[j],\040arr[j\040+\0401])
\040\040\040\040return\040arr
print(bubble_sort([4,\0402,\0401,\0408,\0407,\0406]))
def\040bubble_sort(arr):
\040\040\040\040n\040=\040len(arr)
\040\040\040\040for\040i\040in\040range(n):
\040\040\040\040\040\040\040\040for\040j\040in\040range(n):
\040\040\040\040\040\040\040\040\040\040\040\040if\040arr[j]\040>\040arr[j\040+\0401]:
\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040arr[j],\040arr[j\040+\0401]\040=\040arr[j\040+\0401],\040arr[j]
\040\040\040\040return\040arr
print(bubble_sort([4,\0402,\0401,\0408,\0407,\0406]))
def\040bubble_sort(arr):
\040\040\040\040n\040=\040len(arr)
\040\040\040\040for\040i\040in\040range(n):
\040\040\040\040\040\040\040\040for\040j\040in\040range(n\040-\0401):
\040\040\040\040\040\040\040\040\040\040\040\040if\040arr[j]\040>\040arr[j\040+\0401]:
\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040arr[j],\040arr[j\040+\0401]\040=\040arr[j\040+\0401],\040arr[j]
\040\040\040\040return\040arr
print(bubble_sort([4,\0402,\0401,\0408,\0407,\0406]))
def\040bubble_sort(arr):
\040\040\040\040n\040=\040len(arr)
\040\040\040\040for\040i\040in\040range(n):
\040\040\040\040\040\040\040\040for\040j\040in\040range(n\040-\0401):
\040\040\040\040\040\040\040\040\040\040\040\040if\040arr[j]\040>\040arr[j\040+\0401]:
\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040arr[j],\040arr[j\040+\0401]\040=\040arr[j\040+\0401],\040arr[j]
\040\040\040\040return\040arr\040\040#\040Correct\040indentation\040here
print(bubble_sort([4,\0402,\0401,\0408,\0407,\0406]))
import\040time\040
def\040foo():
\040\040\040\040return\04042\040
for\040foo\040in\040range(5):
\040\040\040\040print(foo)
bar\040=\0401\040
bar\040*=\0400.2
time.sleep(60)
exit
exit()
import\040torch
exit
exit()
import\040numpy\040as\040np
exit
exit()
import\040clip
exit()
import\040clip
exit()
exit((
)
cls
exit()
import\040socket
print(socket.gethostbyname(socket.gethostname())
exit()
import\040sys
print(sys.path)
exit()
import socket
print(socket.gethostbyname(socket.gethostname())
)
cls
exit()
import numpy as np
print(__np.version__
)
exit()
exit
exit()
import math
def taylor_cos(x, terms=5):
    # Chuyển x từ độ sang radians
    radians = x * math.pi / 180
    
    # Tính cos(x) sử dụng chuỗi Taylor với 'terms' số hạng
    cos_x = 0
    for n in range(terms):
        cos_x += ((-1)**n * radians**(2*n)) / math.factorial(2*n)
    
    return cos_x
# Ví dụ tính cos(30 độ)
x = 30
result = taylor_cos(x)
rounded_result = round(result, 2)
print(f"cos({x}) ≈ {rounded_result}")
exit()
